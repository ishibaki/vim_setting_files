#  _____     ______     __     __   __
# /\  __-.  /\  ___\   /\ \   /\ "-.\ \
# \ \ \/\ \ \ \  __\   \ \ \  \ \ \-.  \
#  \ \____-  \ \_____\  \ \_\  \ \_\\"\_\
#   \/____/   \/_____/   \/_/   \/_/ \/_/

[[plugins]] # plugin manager
repo = 'Shougo/dein.vim' # {{{
# }}}

[[plugins]] # Unite User Interface
repo = 'Shougo/unite.vim' # {{{
hook_add = '''
    nnoremap [unite] <Nop>
    nmap <Leader>u [unite]
    nmap <Leader>u<CR> :Unite -vertical<CR>
    nnoremap <silent> [unite]u :<C-u>Unite<Space>file -vertical<CR>
    nnoremap <silent> [unite]g :<C-u>Unite<Space>grep<CR>
    nnoremap <silent> [unite]f :<C-u>Unite<Space>buffer -vertical<CR>
    nnoremap <silent> [unite]b :<C-u>Unite<Space>bookmark -vertical<CR>
    nnoremap <silent> [unite]a :<C-u>UniteBookmardAdd<CR>
    nnoremap <silent> [unite]h :<C-u>Unite<Space>history/yank<CR>
'''
# }}}

[[plugins]] # colorscheme
repo = 'cocopon/iceberg.vim' # {{{
# }}}

[[plugins]]
repo = 'Shougo/neocomplete.vim' # {{{
# }}}

[[plugins]] # ステータスライン
repo = 'itchyny/lightline.vim' # {{{
hook_add = '''
    let g:lightline = {
    \ 'colorscheme': 'iceberg'
    \ }
'''
depends = "iceberg.vim"
# }}}

[[plugins]] # 括弧の操作を楽にする
repo = 'tpope/vim-surround' # {{{
# }}}

[[plugins]] # 行末の不要な半角スペースを可視化
repo = 'bronson/vim-trailing-whitespace' # {{{
# }}}

[[plugins]] # インデントによる階層を分かりやすく可視化
repo = 'nathanaelkane/vim-indent-guides' # {{{
# }}}

[[plugins]] # CSVなどの成型に
repo = 'junegunn/vim-easy-align' # {{{
# ビジュアルモードで選択し，easy-align 呼んで整形．(e.g. vip<Enter>)
# easy-align を呼んだ上で，移動したりテキストオブジェクトを指定して整形．(e.g. gaip)
hook_add = '''
    vmap <Enter> <Plug>(EasyAlign)
    nmap ga <Plug>(EasyAlign)
'''
# }}}

[[plugins]] # 日本語IMEに影響しない括弧補完
repo = 'itmammoth/doorboy.vim' # {{{
hook_add = '''
    let g:doorboy_additional_quotations = {
    \ 'markdown': ['*'],
    \ }
'''
# }}}

[[plugins]] # vim内移動用
repo = 'easymotion/vim-easymotion' # {{{
# EasyMotionのleader keyを<Space>fにする
# fコマンドを，easymotionのfモードにする
hook_add = '''
    let g:EasyMotion_leader_key = '<Space>f'
    let g:EasyMotion_use_migemo = 1
    map <Space>ff <Plug>(easymotion-bd-f)
    map <Space>fs <Plug>(easymotion-bd-f2)
    map <Space>fd <Plug>(easymotion-bd-f2)
    map <Space>ft <Plug>(easymotion-bd-t)
    map <Space>f/ <Plug>(easymotion-sn)
    map <Space>j  <Plug>(easymotion-bd-jk)
    map <Space>k  <Plug>(easymotion-bd-jk)
    map <Space>fw <Plug>(easymotion-bd-w)
    map <C-J>     <Plug>(easymotion-jumptoanywhere)
    imap <C-J>    <C-O><Plug>(easymotion-bd-w)
    map <Space>fW <Plug>(easymotion-bd-W)
    map <Space>fe <Plug>(easymotion-bd-e)
    map <Space>fE <Plug>(easymotion-bd-E)
'''
# }}}

[[plugins]] # vim-table-mode
repo = 'dhruvasagar/vim-table-mode' # {{{
# markdownのときにはマークダウン文法の表形式に変更
hook_add = '''
    augroup vimTableMode
        autocmd!
        autocmd BufNewFile,BufRead *.{md,mkd,mkdn,mdown,markdown} let g:table_mode_corner='|'
    augroup END
'''
# }}}

[[plugins]] # テンプレート作成
repo = 'mattn/sonictemplate-vim' # {{{
# }}}

[[plugins]] # ファイルツリー
repo = 'scrooloose/nerdtree' # {{{
hook_add = '''
    nmap <Leader>t<CR> :NERDTreeToggle<CR>
    let NERDTreeShowBookmarks = 1
    let NERDTreeShowHidden = 1
    nnoremap <silent><C-s> :NERDTreeToggle<CR>
'''
# }}}

[[plugins]]
repo = 'mrtazz/simplenote.vim' # {{{
# ~/.simplenotercを準備すること
hook_add = '''
    source ~/.simplenoterc
    let g:SimplenoteFiletype = 'markdown'

    :function! SimplenoteMemoFunc()
        :SimplenoteOpen 0ea6ef57f1b5aeba17939b88039f1cd4
        if getline("$") != ""
            :call append(line("$"), "")
        endif
        :call append(line("$"), "---")
        :call append(line("$"), "")
        :let now_time = strftime("%Y/%m/%d %H:%M:%S", localtime())
        :call append(line("$"), "## " . now_time)
        :call append(line("$"), "")
        :normal G
        :PrevimOpen
        :2quit
    :endfunction

    command Memo :call SimplenoteMemoFunc()
    command Note :call SimplenoteMemoFunc()
'''
# }}}

[[plugins]] # Text objectを新しく設定できる
repo = 'kana/vim-textobj-user' # {{{
# }}}

[[plugins]] # indentの中身をモーション範囲に
repo = 'kana/vim-textobj-indent' # {{{
depends = 'vim-textobj-user'
# }}}

[[plugins]] # その行をモーション範囲に
repo = 'kana/vim-textobj-line' # {{{
depends = 'vim-textobj-user'
# }}}

[[plugins]] # 表紙でMRUとか出す
repo = 'mhinz/vim-startify' # {{{
hook_add = '''
let g:startify_files_number = 5
let g:startify_lists = [
      \ { 'type': 'files',     'header': ['   === Most Recently Used Files ==='                  ]},
      \ { 'type': 'dir',       'header': ['   === Most Recently Used Files in '. getcwd(). ' ===']},
      \ { 'type': 'sessions',  'header': ['   === Sessions ==='                                  ]},
      \ { 'type': 'bookmarks', 'header': ['   === Bookmarks ==='                                 ]},
      \ { 'type': 'commands',  'header': ['   === Commands ==='                                  ]},
      \ ]

    let g:startify_bookmarks = [{"v": "~/.vimrc"}, {"s": "~/Dropbox/GTD/GTD.txt"}, {"d": "~/Desktop"}, {"~": "~"}, {"x": "~/Dropbox"},]

    function! s:filter_header(lines) abort
        let longest_line   = max(map(copy(a:lines), 'len(v:val)'))
        let centered_lines = map(copy(a:lines),
            \ 'repeat(" ", (&columns / 2) - (longest_line / 2)) . v:val')
        return centered_lines
    endfunction

    let g:startify_custom_header = [
        \ '              .',
        \ '    ________.:::.________',
        \ '    \....../.:?L \.......\',
        \ '     |::::| ????` :::::`',
        \ '     |::::| $$` .:::;".',
        \ '    .|;;;;| $ .;;;;" ,OS.',
        \ '   .G|IIII| .III7" ,ADNNF:.',
        \ '    "|EEEEEEEE7" ,ADDNNF;`',
        \ '     |BBBBBBF" ,ADDDNF;`',
        \ '     |MMMMF" ,ADDNNF;`',
        \ '     |MMF" *ADNNNN;`',
        \ '     `-`    `;MM;`',
        \ '              ``',
        \ ]
'''
depends = "iceberg.vim"
# }}}

[[plugins]] # vim上でプログラムの非同期実行
repo = 'thinca/vim-quickrun' # {{{
hook_add = '''
let g:quickrun_config = {
    \ 'python': {
            \ 'command': 'python3'
        \ }
    \ }
'''
# }}}

[[plugins]] # アウトラインの自動作成
repo = 'Shougo/unite-outline' # {{{
hook_add = '''
    nmap <Leader>ol :Unite outline -vertical<CR>
'''
# }}}

[[plugins]] # asterisk検索をちょっと便利に
repo = 'haya14busa/vim-asterisk' # {{{
hook_add = '''
    map *  <Plug>(asterisk-z*)
    map <kMultiply> <Plug>(asterisk-z*)
    map #  <Plug>(asterisk-z#)
    map g* <Plug>(asterisk-gz*)
    map g<kMultiply> <Plug>(asterisk-gz*)
    map g# <Plug>(asterisk-gz#)
'''
# }}}

[[plugins]] # 新規modeを作成
repo = 'thinca/vim-submode' #{{{
hook_add = '''
    " タイムアウト設定をOFFに
    let g:submode_timeout = 0
    " Submodeから離れるときのキー入力を有効にする
    let g:submode_keep_leaving_key = 1

    " Winsize Change Mode {{{
    call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
    call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
    call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
    call submode#enter_with('winsize', 'n', '', '<C-w><kPlus>', '<C-w>+')
    call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
    call submode#enter_with('winsize', 'n', '', '<C-w><kMinus>', '<C-w>-')
    call submode#map('winsize', 'n', '', '>', '<C-w>>')
    call submode#map('winsize', 'n', '', '<', '<C-w><')
    call submode#map('winsize', 'n', '', '+', '<C-w>+')
    call submode#map('winsize', 'n', '', '<kPlus>', '<C-w>+')
    call submode#map('winsize', 'n', '', '-', '<C-w>-')
    call submode#map('winsize', 'n', '', '<kMinus>', '<C-w>-')
    call submode#map('winsize', 'n', '', '=', '<C-w>=')
    " }}}

    " Window Move Mode {{{
    call submode#enter_with('winmove', 'n', '', '<C-w>h', '<C-w>h')
    call submode#enter_with('winmove', 'n', '', '<C-w>j', '<C-w>j')
    call submode#enter_with('winmove', 'n', '', '<C-w>k', '<C-w>k')
    call submode#enter_with('winmove', 'n', '', '<C-w>l', '<C-w>l')
    call submode#enter_with('winmove', 'n', '', '<C-w>H', '<C-w>H')
    call submode#enter_with('winmove', 'n', '', '<C-w>J', '<C-w>J')
    call submode#enter_with('winmove', 'n', '', '<C-w>K', '<C-w>K')
    call submode#enter_with('winmove', 'n', '', '<C-w>L', '<C-w>L')
    call submode#map('winmove', 'n', '', 'h', '<C-w>h')
    call submode#map('winmove', 'n', '', 'j', '<C-w>j')
    call submode#map('winmove', 'n', '', 'k', '<C-w>k')
    call submode#map('winmove', 'n', '', 'l', '<C-w>l')
    call submode#map('winmove', 'n', '', 'H', '<C-w>H')
    call submode#map('winmove', 'n', '', 'J', '<C-w>J')
    call submode#map('winmove', 'n', '', 'K', '<C-w>K')
    call submode#map('winmove', 'n', '', 'L', '<C-w>L')
    " }}}

    " Tab Move Mode {{{
    call submode#enter_with('tabmove', 'n', '', 'gt', 'gt')
    call submode#enter_with('tabmove', 'n', '', 'gT', 'gT')
    call submode#map('tabmove', 'n', '', 't', 'gt')
    call submode#map('tabmove', 'n', '', 'T', 'gT')
    " }}}
'''
# }}}

# 使っていない設定 {{{
# [[plugins]] # a converter of camelCase, snake_case, and other cases
# repo = 'tpope/vim-abolish' # {{{
# }}}

# [[plugins]] # 英語単語の自動補完
# repo = 'ujihisa/neco-look' # {{{
# on_i = 1
# depends = 'neocomplete.vim'
# }}}

# [[plugins]] # メモ用プラグイン
# repo = 'glidenote/memolist.vim' # {{{
# }}}

# [[plugins]] # チートシート呼び出し
# repo = 'reireias/vim-cheatsheet' # {{{
# hook_add = '''
#     let g:cheatsheet#cheat_file = '~/.cheatsheet.md'
# '''
# # }}}

# [[plugins]] # :CalendarでGoogleカレンダーを開けます
# repo = 'itchyny/calendar.vim' # {{{
# hook_add = '''
#     let g:calendar_google_calendar = 1
#     let g:calendar_first_day = 'monday'
# '''
# }}}

# [[plugins]] # w3mブラウザー
# repo = 'yuratomo/w3m.vim' # {{{
# }}}

# [[plugins]] # <C-a>,<C-x>でleft<->rightなど対義語変換, zef/vim-cycleよりfork
# repo = 'zef/vim-cycle' # {{{
# hook_add = '''
#     call AddCycleGroup(['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'])
#     call AddCycleGroup(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
#     call AddCycleGroup(['hoge', 'fuga', 'piyo', 'mogera'])
#     call AddCycleGroup(['foo', 'bar', 'baz', 'qux', 'quux', 'corge', 'grault', 'garply', 'waldo', 'fred', 'plugh', 'xyzzy', 'thud'])
#     call AddCycleGroup(['mercury', 'venus', 'earth', 'mars', 'saturn', 'jupiter', 'uranus', 'neptune', 'pluto', 'the_sun'])
#     call AddCycleGroup(['ochre', 'amber', 'opal'])
#     call AddCycleGroup(['able', 'baker', 'charlie', 'dog', 'easy', 'fox', 'george', 'how', 'item', 'jack', 'king', 'love', 'mike', 'nancy', 'over', 'peter', 'queen', 'rodger', 'sugar', 'tiger', 'uncle', 'victory', 'whiskey', 'x-ray', 'york', 'zebra'])
#     call AddCycleGroup('python', ['else', 'elif'])
# '''
# }}}

# [[plugins]] # カラースキーム
# repo = 'w0ng/vim-hybrid' # {{{
# hook_add = '''
#     let g:hybrid_reduced_contrast = 0
# '''
# }}}

# [[plugins]] # コードブロックでvim内移動
# repo = 'haya14busa/vim-edgemotion' # {{{
# hook_add = '''
#     map <C-j> <Plug>(edgemotion-j)
#     map <C-k> <Plug>(edgemotion-k)
# '''
# }}}

# 例集 {{{
# git clone 後、実行すべきコマンドがある場合はこんな感じ {{{
# [[plugins]]
# repo = 'Shougo/vimproc.vim'
# hook_post_update = '''
#   if dein#util#_is_windows()
#     let cmd = 'tools\\update-dll-mingw'
#   elseif dein#util#_is_cygwin()
#     let cmd = 'make -f make_cygwin.mak'
#   elseif executable('gmake')
#     let cmd = 'gmake'
#   else
#     let cmd = 'make'
#   endif
#   let g:dein#plugin.build = cmd
# '''
# }}}

# ブランチやタグを指定したいとき {{{
# [[plugins]]
# repo = 'delphinus35/typescript-vim'
# rev  = 'colorize-template-strings'
# }}}

# 特定の条件で読み込みたいとき {{{
# [[plugins]]
# repo = 'elzr/vim-json'
# if   = '''! has('kaoriya')'''
# }}}

# }}}

# }}}

# vim: set foldmethod=marker :

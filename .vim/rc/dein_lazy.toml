#  _____     ______     __     __   __
# /\  __-.  /\  ___\   /\ \   /\ "-.\ \
# \ \ \/\ \ \ \  __\   \ \ \  \ \ \-.  \
#  \ \____-  \ \_____\  \ \_\  \ \_\\"\_\
#   \/____/   \/_____/   \/_/   \/_/ \/_/
#
#  __         ______     ______     __  __
# /\ \       /\  __ \   /\___  \   /\ \_\ \
# \ \ \____  \ \  __ \  \/_/  /__  \ \____ \
#  \ \_____\  \ \_\ \_\   /\_____\  \/\_____\
#   \/_____/   \/_/\/_/   \/_____/   \/_____/

# -----python設定----- {{{

[[plugins]] # vimのマニュアル参照
repo = 'davidhalter/jedi-vim' # {{{
on_ft = 'python'
# jediにおける変数リネーム機能とquickrun実行コマンドのcompeteをクリアしておく
hook_add = '''
    let g:jedi#rename_command = "<Leader>R"
    let g:jedi#force_py_version = 3
    let g:jedi#completions_enabled = 0
'''
# }}}

[[plugins]] # text objectをpythonのdefとClassで設定できます
repo = 'bps/vim-textobj-python' # {{{
on_ft = 'python'
# }}}

[[plugins]] # ipynb editor
repo = 'szymonmaszke/vimpyter' # {{{
on_ft = 'ipynb'
hook_add = '''
    nmap <silent><Leader>b :VimpyterInsertPythonBlock<CR>
    nmap <silent><Leader>s :VimpyterStartJupyter<CR>
    nmap <silent><Leader>S :VimpyterStartNteract<CR>
    let g:vimpyter_view_directory = '$HOME/.vimpyter_views'
    xnoremap <silent> ic <Esc>?```{.python?+1<CR>V/```/-1<CR>
    xnoremap <silent> ac <Esc>?```{.python<CR>V/```<CR>
'''
# }}}

[[plugins]] # Snippet
repo = 'Shougo/neosnippet.vim' # {{{
on_ft = ['python', 'markdown']
hook_add = '''
    let g:neosnippet#disable_runtime_snippets = {
            \   '_' : 1,
            \ }
    let g:neosnippet#snippets_directory='$HOME/.vim/snippets/'
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_ft = 'python'
depends = 'neosnippet.vim'
# }}}

[[plugins]] # Python cell mode
repo = 'julienr/vim-cellmode' # {{{
on_ft = 'python'
hook_add = '''
    let g:cellmode_tmux_sessionname=''
    let g:cellmode_tmux_windowname=''
    let g:cellmode_tmux_panenumber='0'
    let g:cellmode_screen_sessionname='ipython'
    let g:cellmode_screen_window='0'
    let g:cellmode_cell_delimiter='\(##\|#%%\|#\s%%\)'

    function! InsertCellSeparatorLine(...)
      let line_num = get(a:, 1, '.')
      if empty(getline(line_num))
        normal 79A#-
      else
        normal o79A#-
      endif
    endfunction

    nnoremap <silent><Space># :<C-u>call InsertCellSeparatorLine()<CR>
'''
# }}}

[[plugins]] # python editing mode
repo = 'python-mode/python-mode' # {{{
on_ft = 'python'
hook_add = '''
    let g:pymode_python = 'python3'
    let g:pymode_run = 0
    let g:pymode_run_bind = '<leader>_'
    let g:pymode_doc_bind = '<leader>K'
'''
# }}}

# Not In Use {{{

# [[plugins]]
# repo = 'lambdalisue/vim-pyenv' # {{{
# depends = 'davidhalter/jedi-vim'
# on_ft = 'python'
# # }}}

# [[plugins]]
# repo = 'hynek/vim-python-pep8-indent' # {{{
# on_ft = 'python'
# # }}}

# [[plugins]]
# repo = 'andviro/flake8-vim' # {{{
# on_ft = 'python'
# # }}}

# [[plugins]] # devdocs
# repo = 'rhysd/devdocs.vim' # {{{
# on_ft = 'python'
# hook_add = '''
#     augroup plugin-devdocs
#         autocmd!
#         autocmd FileType python nmap <buffer>K <Plug>(devdocs-under-cursor)
#     augroup END
#     nmap K <Plug>(devdocs-under-cursor)
#     let g:devdocs_filetype_map = { '*': '' }
#     let g:devdocs_open_cmd = 'open -a Safari'
# '''
# # }}}

# }}}

# }}}

# ----- markdown関連 ----- {{{

[[plugins]] # 自動タグ補完
repo = 'alvan/vim-closetag' # {{{
on_ft = ['markdown', 'html']
hook_add = '''
    let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.md,*.markdown,*.mkdown,*.mdown'
    let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'
    let g:closetag_filetypes = 'html,xhtml,phtml,markdown'
    let g:closetag_xhtml_filetypes = 'xhtml,jsx'
'''
# }}}

[[plugins]] # stand aloneに使えるMarkdown Previewer, Mermeid記法も使える
repo = 'kannokanno/previm' # {{{
on_ft = ['markdown','txt']
hook_add = '''
    let g:previm_open_cmd = 'open -a Safari.app'
    let g:previm_enable_realtime = 1
    let g:previm_disable_default_css = 1
    let g:previm_custom_css_path = '~/.pandoc/github.css'
    nnoremap <silent> <Leader>P :PrevimOpen<CR>
    " autocmd BufNewFile,BufRead *.{md,mkd,mkdn,mdwn,mdown,markdown} PrevimOpen
'''
# }}}

[[plugins]] # アウトラインの自動作成
repo = 'Shougo/unite-outline' # {{{
hook_add = '''
    nnoremap <Leader>ol :<C-u>Unite -vertical outline<CR>
'''
depends = 'unite.vim'
on_ft = 'markdown'
# }}}

[[plugins]] # citation
repo = 'rafaqz/citation.vim' # {{{
hook_add = '''
    let g:citation_vim_bibtex_file="~/.pandoc/library.bib"
    let g:citation_vim_mode="bibtex"
    let g:citation_vim_cache_path='~/.vim/citation_cache'
    let g:citation_vim_outer_prefix="["
    let g:citation_vim_inner_prefix="@"
    let g:citation_vim_suffix="]"
    let g:citation_vim_et_al_limit=2
    nnoremap <silent> <leader>c :<C-u>Unite -direction=topleft -vertical citation/key<CR>
    nnoremap <silent> [unite]k  :<C-u>Unite -direction=topleft -vertical citation/key<CR>
    nnoremap <silent> [unite]a  :<C-u>Unite -direction=topleft -vertical citation/abstract<CR>
    nnoremap <silent> [unite]i  :<C-u>Unite -direction=topleft -vertical citation<CR>
    nnoremap <silent> K :<C-u>UniteWithCursorWord -direction=topleft -vertical citation/key<CR>
'''
depends = 'unite.vim'
on_ft = ['markdown']
# }}}

[[plugins]] # Markdown用テキストオブジェクト
repo = 'coachshea/vim-textobj-markdown' # {{{
on_ft = ['markdown']
depends = 'vim-textobj-user'
# }}}

# Not In Use {{{

# [[plugins]] # markdownでoutlineを作る専用
# repo = 'Shougo/unite.vim' # {{{
# on_ft = ['markdown']
# # }}}

# [[plugins]] # Markdownプレビューワ，同期が早い
# repo = 'iamcco/markdown-preview.nvim' # {{{
# on_ft = 'markdown'
# hook_add = '''
#     let g:mkdp_auto_start = 1
#     let g:mkdp_auto_close = 1
#     " use a custom markdown style must be absolute path
#     let g:mkdp_markdown_css = '~/.pandoc/github.css'
# '''
# # }}}

# [[plugins]] # Markdown
# repo = 'rcmdnk/vim-markdown' # {{{
# on_ft = ['markdown','mkd']
# hook_add = '''
#     let g:vim_markdown_frontmatter = 1
#     let g:vim_markdown_math = 1
# '''
# # }}}

# [[plugins]] # HTMLタグの自動補完
# repo = 'vim-scripts/HTML-AutoCloseTag' # {{{
# on_ft = ['markdown', 'html']
# # }}}

# }}}

# }}}

# ----- その他 ----- {{{

[[plugins]]
repo = 'vim-scripts/Vim-R-plugin' # {{{
on_ft = 'R'
hook_add = '''
    let maplocalleader = ","
    let vimrplugin_vsplit = 1
    let vimrplugin_assign = 0
    let vimrplugin_vimpager = "horizontal"

    let vimrplugin_objbr_place = "console, right"
    let vimrplugin_objbr_opendf = 0
'''
# }}}

[[plugins]] # 英語単語の自動補完
repo = 'ujihisa/neco-look' # {{{
on_ft = ['markdown', 'rst', 'tex', 'gitcommit', 'gitrebase']
on_i = 1
depends = 'neocomplete.vim'
hook_add = '''
    if !exists('g:neocomplete#text_mode_filetypes')
        let g:neocomplete#text_mode_filetypes = {}
    endif
    let g:neocomplete#text_mode_filetypes = {
        \ 'rst': 1,
        \ 'markdown': 1,
        \ 'gitrebase': 1,
        \ 'gitcommit': 1,
        \ 'tex': 1,
        \ }
'''
# }}}

[[plugins]] # toml syntax
repo = 'cespare/vim-toml' # {{{
on_ft = 'toml'
# }}}

[[plugins]] # diffsplitが便利になるよ
repo = 'chrisbra/vim-diff-enhanced' # {{{
# }}}

[[plugins]] # cow, comment out plugin
repo = 'tyru/caw.vim' # {{{
on_ft = ['python', 'html', 'markdown', 'vim', 'toml', 'zsh']
hook_add = '''
    nmap gcc <Plug>(caw:wrap:toggle)
    vmap gcc <Plug>(caw:wrap:toggle)
'''
# }}}

[[plugins]] # For Excel viewer and vimplenote-vim
repo = 'mattn/webapi-vim' # {{{
# }}}

[[plugins]] # Excel viewer (only .xlsx)
repo = 'mattn/excelview-vim' # {{{
depends = 'webapi-vim'
# }}}

[[plugins]]
repo = 'upamune/esa.vim' # {{{
depends = 'webapi-vim'
hook_add = '''
    let g:esa_team = 'tishibashi-lab'
'''
# }}}

[[plugins]] # カーソル下の語が自動ハイライトされる
repo = 'itchyny/vim-cursorword' # {{{
on_ft = ['python', 'html', 'toml', 'c']
# }}}

[[plugins]] # カラムをモーション範囲に
repo = 'idbrii/textobj-word-column.vim' # {{{
depends = 'vim-textobj-user'
# }}}

# Not In Use {{{
# }}}

# }}}

# vim: set foldmethod=marker :
